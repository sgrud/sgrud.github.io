import{__decorate as e}from"tslib";import{Factor as t,Kernel as r,Target as s,HttpClient as i,Provider as o,assign as l}from"@sgrud/core";import{observable as n,filter as a,BehaviorSubject as h,from as u,switchMap as p,take as d,map as c,of as g,timer as m,delay as v,finalize as y}from"rxjs";import b from"@babel/runtime/helpers/extends";import{Router as f}from"@sgrud/shell";let k,x=(k=Symbol.observable,class{get[n](){return()=>this.changes.asObservable().pipe(a(Boolean))}get user(){return this.changes.value}set user(e){this.changes.next(e)}constructor(){this[k]=void 0,this.changes=void 0,this.kernel=void 0,this.changes=new h(null);const e=localStorage.getItem("user");u(this).pipe(p(()=>this.kernel.resolve("sgrud-realworld-lazy","/realworld/lazy")),p(e=>this.kernel.insmod(e,"/realworld/lazy",!0)),d(1)).subscribe(),e&&this.changes.next(JSON.parse(e)),this.changes.subscribe(e=>{localStorage.setItem("user",JSON.stringify(e))})}});e([t(()=>r)],x.prototype,"kernel",void 0),x=e([s()],x);let $=class{constructor(){this.url="//api.realworld.io/api",this.credentials=void 0}getArticle(e){return i.get(`${this.url}/${e}`).pipe(c(({response:e})=>e.article))}getArticlePage(e,t){return this.getPage("articles",e,t)}getFeedPage(e,t){return this.getPage("feed",e,t)}getPage(e,t,r){return(new i).handle({queryParams:{limit:t,offset:r},url:`${this.url}/${e}`}).pipe(c(({response:e})=>e))}getTags(){return i.get(`${this.url}/tags`).pipe(c(({response:e})=>e.tags))}login(e,t){return i.post(`${this.url}/users/login`,{user:{email:e,password:t}}).pipe(c(({response:e})=>(this.credentials.user=e.user,e.user)))}register(e,t,r){return i.post(`${this.url}/users`,{user:{email:e,username:t,password:r}}).pipe(c(({response:e})=>(this.credentials.user=e.user,e.user)))}};e([t(()=>x)],$.prototype,"credentials",void 0),$=e([s()],$);let w=class extends(o("sgrud.core.http.HttpProxy")){constructor(){super(),this.credentials=void 0,this.endpoint=void 0,this.token=void 0,u(this.credentials).subscribe(e=>{this.token=e.token})}proxy(e,t){return e.url.startsWith(this.endpoint.url)&&this.token?t.handle(l(e,{headers:b({},e.headers,{authorization:"Token "+this.token})})):t.handle(e)}};e([t(()=>x)],w.prototype,"credentials",void 0),e([t(()=>$)],w.prototype,"endpoint",void 0),w=e([s()],w);let P=class extends(o("sgrud.shell.router.RouterTask")){constructor(...e){super(...e),this.credentials=void 0,this.router=void 0,this.private=/^\/(editor|(profile|settings)$)/,this.public=/^\/(login|register)$/}handle(e,t,r){if(this.credentials.user){if(this.public.exec(t.path))return g(e)}else if(this.private.exec(t.path))return this.router.navigate("login");return r.handle(t)}};e([t(()=>x)],P.prototype,"credentials",void 0),e([t(()=>f)],P.prototype,"router",void 0),P=e([s()],P);let S=class extends(o("sgrud.shell.router.RouterTask")){constructor(...e){super(...e),this.element=void 0}handle(e,t,r){var s;return this.element?((s=this.element.style).transition||(s.transition="opacity 100ms"),this.element.style.opacity="0",m(100).pipe(p(()=>r.handle(t).pipe(v(50))),y(()=>this.element.style.opacity="1"))):r.handle(t)}};S=e([s()],S);export{w as AuthProxy,P as AuthTask,x as Credentials,$ as Endpoint,S as FadeTask};
//# sourceMappingURL=index.modern.js.map
