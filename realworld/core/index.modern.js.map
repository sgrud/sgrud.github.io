{"version":3,"file":"index.modern.js","sources":["../../packages/core/src/store/config.ts","../../packages/core/src/conduit/endpoint.ts","../../packages/core/src/store/user.ts","../../packages/core/src/proxy/auth.ts","../../packages/core/src/proxy/fade.ts","../../packages/core/src/queue/fade.ts"],"sourcesContent":["import { Bus } from '@sgrud/bus';\nimport { Stateful, Store } from '@sgrud/state';\n\n@Stateful(ConfigStore.handle, {\n  apiUrl: 'https://api.realworld.io/api'\n})\nexport class ConfigStore extends Store<ConfigStore> {\n\n  public static readonly handle: Bus.Handle = 'io.github.sgrud.state.config';\n\n  public readonly apiUrl!: string;\n\n}\n","import { Http } from '@sgrud/core';\nimport { first, from, map, Observable, switchMap } from 'rxjs';\nimport { ConfigStore } from '../store/config';\nimport { Article, Articles, Comment, Profile } from './typing';\n\nexport abstract class Endpoint {\n\n  private static get apiUrl(): Observable<string> {\n    return from(new ConfigStore()).pipe(first(), map(({ apiUrl }) => apiUrl));\n  }\n\n  /*\n   * Read Operations\n   */\n\n  public static readArticles({\n    author = undefined,\n    favorited = undefined,\n    limit = 10,\n    offset = 0,\n    path = undefined,\n    tag = undefined\n  }: Partial<Articles> = {}): Observable<Articles> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<Articles>({\n        queryParams: {\n          ...author && { author },\n          ...favorited && { favorited },\n          ...limit && { limit },\n          ...offset && { offset },\n          ...tag && { tag }\n        },\n        url: `${url}/articles` + (path ? `/${path}` : '')\n      })),\n      map(({ response }) => ({\n        ...response, author, favorited, limit, offset, path, tag\n      }))\n    );\n  }\n\n  public static readArticle(slug: string): Observable<Article> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${slug}`),\n      switchMap((url) => Http.get<{ article: Article }>(url)),\n      map(({ response }) => response.article)\n    );\n  }\n\n  public static readComments(slug: string): Observable<Comment[]> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${slug}/comments`),\n      switchMap((url) => Http.get<{ comments: Comment[] }>(url)),\n      map(({ response }) => response.comments)\n    );\n  }\n\n  public static readProfile(username: string): Observable<Profile> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/profiles/${username}`),\n      switchMap((url) => Http.get<{ profile: Profile }>(url)),\n      map(({ response }) => response.profile)\n    );\n  }\n\n  public static readTags(): Observable<string[]> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/tags`),\n      switchMap((url) => Http.get<{ tags: string[] }>(url)),\n      map(({ response }) => response.tags)\n    );\n  }\n\n  /*\n   * Remove Operations\n   */\n\n  public static removeArticle(\n    article: Article\n  ): Observable<unknown> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${article.slug}`),\n      switchMap((url) => Http.delete<unknown>(url)),\n      map(({ response }) => response)\n    );\n  }\n\n  public static removeComment(\n    article: Article,\n    comment: Comment\n  ): Observable<unknown> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${article.slug}/comments/${comment.id}`),\n      switchMap((url) => Http.delete<unknown>(url)),\n      map(({ response }) => response)\n    );\n  }\n\n  /*\n   * Update Operations\n   */\n\n  public static updateArticle(\n    article: Partial<Article>\n  ): Observable<Article> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ article: Article }>({\n        body: { article },\n        method: article.slug ? 'PUT' : 'POST',\n        url: `${url}/articles` + (article.slug ? `/${article.slug}` : '')\n      })),\n      map(({ response }) => response.article)\n    );\n  }\n\n  public static updateComment(\n    article: Article,\n    comment: Partial<Comment>\n  ): Observable<Comment> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ comment: Comment }>({\n        body: { comment },\n        method: 'POST',\n        url: `${url}/articles/${article.slug}/comments`\n      })),\n      map(({ response }) => response.comment)\n    );\n  }\n\n  public static updateFollow(\n    profile: Profile\n  ): Observable<Profile> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ profile: Profile }>({\n        method: profile.following ? 'DELETE' : 'POST',\n        url: `${url}/profiles/${profile.username}/follow`\n      })),\n      map(({ response }) => response.profile)\n    );\n  }\n\n  public static updateLike(\n    article: Article\n  ): Observable<Article> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ article: Article }>({\n        method: article.favorited ? 'DELETE' : 'POST',\n        url: `${url}/articles/${article.slug}/favorite`\n      })),\n      map(({ response }) => response.article)\n    );\n  }\n\n  /*\n   * Instance Invalidation\n   */\n\n  private constructor() {\n    throw new TypeError('Endpoint.constructor');\n  }\n\n}\n","import { Bus } from '@sgrud/bus';\nimport { Stateful, Store } from '@sgrud/state';\nimport { User } from '../conduit/typing';\nimport { ConfigStore } from './config';\n\n@Stateful(UserStore.handle, {\n  bio: undefined,\n  email: undefined,\n  image: undefined,\n  token: undefined,\n  username: undefined\n})\nexport class UserStore extends Store<UserStore> {\n\n  public static readonly handle: Bus.Handle = 'io.github.sgrud.state.user';\n\n  public readonly bio?: string | undefined;\n\n  public readonly email?: string | undefined;\n\n  public readonly image?: string | undefined;\n\n  public readonly token?: string | undefined;\n\n  public readonly username?: string | undefined;\n\n  public async login(\n    email: string,\n    password: string\n  ): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/users/login`, {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          password\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n  public async logout(): Promise<Store.State<this>> {\n    const next = {\n      bio: undefined,\n      email: undefined,\n      image: undefined,\n      password: undefined,\n      token: undefined,\n      username: undefined\n    };\n\n    return Object.assign({}, this, next);\n  }\n\n  public async register(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/users`, {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          username,\n          password\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n  public async update(user: Partial<User>): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/user`, {\n      method: 'PUT',\n      headers: {\n        'accept': 'application/json',\n        'authorization': `Token ${this.token!}`,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n}\n","import { assign, Factor, Http, Provider, Proxy, Target } from '@sgrud/core';\nimport { StateHandler, Store } from '@sgrud/state';\nimport { first, forkJoin, from, Observable, race, switchMap, timer } from 'rxjs';\nimport { ConfigStore } from '../store/config';\nimport { UserStore } from '../store/user';\n\n@Target()\nexport class UserProxy\n  extends Provider<typeof Proxy>('sgrud.core.Proxy') {\n\n  @Factor(() => ConfigStore)\n  private readonly configStore!: Store<ConfigStore>;\n\n  @Factor(() => UserStore)\n  private readonly userStore!: Store<UserStore>;\n\n  public override handle<T>(\n    request: Http.Request,\n    handler: Http.Handler\n  ): Observable<Http.Response<T>> {\n    return race(StateHandler, timer(0)).pipe(switchMap((stateHandler) => {\n      if (stateHandler instanceof StateHandler) {\n        return forkJoin({\n          configState: from(this.configStore).pipe(first()),\n          userState: from(this.userStore).pipe(first())\n        }).pipe(switchMap(({ configState, userState }) => {\n          if (request.url.startsWith(configState.apiUrl) && userState.token) {\n            assign(request, {\n              headers: {\n                authorization: `Token ${userState.token}`\n              }\n            });\n          }\n\n          return handler.handle(request);\n        }));\n      }\n\n      return handler.handle(request);\n    }));\n  }\n\n}\n","import { Target, Transit } from '@sgrud/core';\nimport { from } from 'rxjs';\n\n@Target([], Transit)\nexport class FadeProxy extends Transit {\n\n  public constructor() {\n    super();\n\n    document.documentElement.style.transition = '250ms filter';\n\n    from(this).subscribe(({ length }) => {\n      document.documentElement.style.filter = `grayscale(${length ? 1 : 0})`;\n      document.documentElement.style.pointerEvents = length ? 'none' : 'auto';\n    });\n  }\n\n}\n","import { Provider, Target } from '@sgrud/core';\nimport { Queue, Router } from '@sgrud/shell';\nimport { delay, finalize, Observable, switchMap, timer } from 'rxjs';\n\n@Target()\nexport class FadeQueue\n  extends Provider<typeof Queue>('sgrud.shell.Queue') {\n\n  public element?: HTMLElement | undefined;\n\n  public override handle(\n    _prev: Router.State,\n    next: Router.State,\n    queue: Router.Queue\n  ): Observable<Router.State> {\n    if (this.element) {\n      this.element.style.transition ||= 'opacity 100ms';\n      this.element.style.opacity = '0';\n\n      return timer(100).pipe(\n        switchMap(() => queue.handle(next).pipe(delay(100))),\n        finalize(() => this.element!.style.opacity = '1')\n      );\n    }\n\n    return queue.handle(next);\n  }\n\n}\n"],"names":["ConfigStore","_class","Store","constructor","args","super","this","apiUrl","handle","__decorate","Stateful","Endpoint","from","pipe","first","map","readArticles","author","favorited","limit","offset","path","tag","switchMap","url","Http","request","queryParams","_extends","response","readArticle","slug","get","article","readComments","comments","readProfile","username","profile","readTags","tags","removeArticle","delete","removeComment","comment","id","updateArticle","body","method","updateComment","updateFollow","following","updateLike","TypeError","UserStore","bio","email","image","token","login","password","fetch","state","sgrud","effects","config","headers","accept","JSON","stringify","user","ok","json","next","Object","assign","logout","undefined","register","update","authorization","UserProxy","Provider","configStore","userStore","handler","race","StateHandler","timer","stateHandler","forkJoin","configState","userState","startsWith","Factor","prototype","Target","FadeProxy","Transit","document","documentElement","style","transition","subscribe","length","filter","pointerEvents","FadeQueue","element","_prev","queue","_this$element$style","opacity","delay","finalize"],"mappings":"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"}