{"version":3,"file":"index.modern.js","sources":["../../packages/core/src/store/config.ts","../../packages/core/src/conduit/endpoint.ts","../../packages/core/src/store/user.ts","../../packages/core/src/proxy/auth.ts","../../packages/core/src/proxy/fade.ts","../../packages/core/src/queue/fade.ts"],"sourcesContent":["import { Bus } from '@sgrud/bus';\nimport { Stateful, Store } from '@sgrud/state';\n\n@Stateful(ConfigStore.handle, {\n  apiUrl: 'https://api.realworld.io/api'\n})\nexport class ConfigStore extends Store<ConfigStore> {\n\n  public static readonly handle: Bus.Handle = 'io.github.sgrud.state.config';\n\n  public readonly apiUrl!: string;\n\n}\n","import { Http } from '@sgrud/core';\nimport { first, from, map, Observable, switchMap } from 'rxjs';\nimport { ConfigStore } from '../store/config';\nimport { Article, Articles, Comment, Profile } from './typing';\n\nexport abstract class Endpoint {\n\n  private static get apiUrl(): Observable<string> {\n    return from(new ConfigStore()).pipe(first(), map(({ apiUrl }) => apiUrl));\n  }\n\n  /*\n   * Read Operations\n   */\n\n  public static readArticles({\n    author = undefined,\n    favorited = undefined,\n    limit = 10,\n    offset = 0,\n    path = undefined,\n    tag = undefined\n  }: Partial<Articles> = {}): Observable<Articles> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<Articles>({\n        queryParams: {\n          ...author && { author },\n          ...favorited && { favorited },\n          ...limit && { limit },\n          ...offset && { offset },\n          ...tag && { tag }\n        },\n        url: `${url}/articles` + (path ? `/${path}` : '')\n      })),\n      map(({ response }) => ({\n        ...response, author, favorited, limit, offset, path, tag\n      }))\n    );\n  }\n\n  public static readArticle(slug: string): Observable<Article> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${slug}`),\n      switchMap((url) => Http.get<{ article: Article }>(url)),\n      map(({ response }) => response.article)\n    );\n  }\n\n  public static readComments(slug: string): Observable<Comment[]> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${slug}/comments`),\n      switchMap((url) => Http.get<{ comments: Comment[] }>(url)),\n      map(({ response }) => response.comments)\n    );\n  }\n\n  public static readProfile(username: string): Observable<Profile> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/profiles/${username}`),\n      switchMap((url) => Http.get<{ profile: Profile }>(url)),\n      map(({ response }) => response.profile)\n    );\n  }\n\n  public static readTags(): Observable<string[]> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/tags`),\n      switchMap((url) => Http.get<{ tags: string[] }>(url)),\n      map(({ response }) => response.tags)\n    );\n  }\n\n  /*\n   * Remove Operations\n   */\n\n  public static removeArticle(\n    article: Article\n  ): Observable<unknown> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${article.slug}`),\n      switchMap((url) => Http.delete<unknown>(url)),\n      map(({ response }) => response)\n    );\n  }\n\n  public static removeComment(\n    article: Article,\n    comment: Comment\n  ): Observable<unknown> {\n    return this.apiUrl.pipe(\n      map((url) => `${url}/articles/${article.slug}/comments/${comment.id}`),\n      switchMap((url) => Http.delete<unknown>(url)),\n      map(({ response }) => response)\n    );\n  }\n\n  /*\n   * Update Operations\n   */\n\n  public static updateArticle(\n    article: Partial<Article>\n  ): Observable<Article> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ article: Article }>({\n        body: { article },\n        method: article.slug ? 'PUT' : 'POST',\n        url: `${url}/articles` + (article.slug ? `/${article.slug}` : '')\n      })),\n      map(({ response }) => response.article)\n    );\n  }\n\n  public static updateComment(\n    article: Article,\n    comment: Partial<Comment>\n  ): Observable<Comment> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ comment: Comment }>({\n        body: { comment },\n        method: 'POST',\n        url: `${url}/articles/${article.slug}/comments`\n      })),\n      map(({ response }) => response.comment)\n    );\n  }\n\n  public static updateFollow(\n    profile: Profile\n  ): Observable<Profile> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ profile: Profile }>({\n        method: profile.following ? 'DELETE' : 'POST',\n        url: `${url}/profiles/${profile.username}/follow`\n      })),\n      map(({ response }) => response.profile)\n    );\n  }\n\n  public static updateLike(\n    article: Article\n  ): Observable<Article> {\n    return this.apiUrl.pipe(\n      switchMap((url) => Http.request<{ article: Article }>({\n        method: article.favorited ? 'DELETE' : 'POST',\n        url: `${url}/articles/${article.slug}/favorite`\n      })),\n      map(({ response }) => response.article)\n    );\n  }\n\n  /*\n   * Instance Invalidation\n   */\n\n  private constructor() {\n    throw new TypeError('Endpoint.constructor');\n  }\n\n}\n","import { Bus } from '@sgrud/bus';\nimport { Stateful, Store } from '@sgrud/state';\nimport { User } from '../conduit/typing';\nimport { ConfigStore } from './config';\n\n@Stateful(UserStore.handle, {\n  bio: undefined,\n  email: undefined,\n  image: undefined,\n  token: undefined,\n  username: undefined\n})\nexport class UserStore extends Store<UserStore> {\n\n  public static readonly handle: Bus.Handle = 'io.github.sgrud.state.user';\n\n  public readonly bio?: string | undefined;\n\n  public readonly email?: string | undefined;\n\n  public readonly image?: string | undefined;\n\n  public readonly token?: string | undefined;\n\n  public readonly username?: string | undefined;\n\n  public async login(\n    email: string,\n    password: string\n  ): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/users/login`, {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          password\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n  public async logout(): Promise<Store.State<this>> {\n    const next = {\n      bio: undefined,\n      email: undefined,\n      image: undefined,\n      password: undefined,\n      token: undefined,\n      username: undefined\n    };\n\n    return Object.assign({}, this, next);\n  }\n\n  public async register(\n    email: string,\n    username: string,\n    password: string\n  ): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/users`, {\n      method: 'POST',\n      headers: {\n        'accept': 'application/json',\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: {\n          email,\n          username,\n          password\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n  public async update(user: Partial<User>): Promise<Store.State<this>> {\n    const { fetch, state } = sgrud.state.effects;\n    const config = (await state<ConfigStore>('io.github.sgrud.state.config'))!;\n\n    const response = await fetch(`${config.apiUrl}/user`, {\n      method: 'PUT',\n      headers: {\n        'accept': 'application/json',\n        'authorization': `Token ${this.token!}`,\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n\n    if (!response.ok) {\n      throw await response.json();\n    }\n\n    const { user: next } = await response.json();\n    return Object.assign({}, this, next);\n  }\n\n}\n","import { assign, Factor, Http, Provider, Proxy, Target } from '@sgrud/core';\nimport { StateHandler, Store } from '@sgrud/state';\nimport { first, forkJoin, from, Observable, race, switchMap, timer } from 'rxjs';\nimport { ConfigStore } from '../store/config';\nimport { UserStore } from '../store/user';\n\n@Target()\nexport class UserProxy\n  extends Provider<typeof Proxy>('sgrud.core.Proxy') {\n\n  @Factor(() => ConfigStore)\n  private readonly configStore!: Store<ConfigStore>;\n\n  @Factor(() => UserStore)\n  private readonly userStore!: Store<UserStore>;\n\n  public override handle<T>(\n    request: Http.Request,\n    handler: Http.Handler\n  ): Observable<Http.Response<T>> {\n    return race(StateHandler, timer(0)).pipe(switchMap((stateHandler) => {\n      if (stateHandler instanceof StateHandler) {\n        return forkJoin({\n          configState: from(this.configStore).pipe(first()),\n          userState: from(this.userStore).pipe(first())\n        }).pipe(switchMap(({ configState, userState }) => {\n          if (request.url.startsWith(configState.apiUrl) && userState.token) {\n            assign(request, {\n              headers: {\n                authorization: `Token ${userState.token}`\n              }\n            });\n          }\n\n          return handler.handle(request);\n        }));\n      }\n\n      return handler.handle(request);\n    }));\n  }\n\n}\n","import { Target, Transit } from '@sgrud/core';\nimport { from } from 'rxjs';\n\n@Target([], Transit)\nexport class FadeProxy extends Transit {\n\n  public constructor() {\n    super();\n\n    document.documentElement.style.transition = '250ms filter';\n\n    from(this).subscribe(({ length }) => {\n      document.documentElement.style.filter = `grayscale(${length ? 1 : 0})`;\n      document.documentElement.style.pointerEvents = length ? 'none' : 'auto';\n    });\n  }\n\n}\n","import { Provider, Target } from '@sgrud/core';\nimport { Queue, Router } from '@sgrud/shell';\nimport { Observable, delay, finalize, switchMap, timer } from 'rxjs';\n\n@Target()\nexport class FadeQueue\n  extends Provider<typeof Queue>('sgrud.shell.Queue') {\n\n  public element?: HTMLElement | undefined;\n\n  public handle(\n    _prev: Router.State,\n    next: Router.State,\n    queue: Router.Queue\n  ): Observable<Router.State> {\n    if (this.element) {\n      this.element.style.transition ||= 'opacity 100ms';\n      this.element.style.opacity = '0';\n\n      return timer(100).pipe(\n        switchMap(() => queue.handle(next).pipe(delay(50))),\n        finalize(() => this.element!.style.opacity = '1')\n      );\n    }\n\n    return queue.handle(next);\n  }\n\n}\n"],"names":["ConfigStore","_class","Store","constructor","args","apiUrl","handle","ConfigStore_1","__decorate","Stateful","Endpoint","from","pipe","first","map","static","author","favorited","limit","offset","path","tag","this","switchMap","url","Http","request","queryParams","_extends","response","slug","get","article","comments","username","profile","tags","delete","comment","id","body","method","following","TypeError","UserStore","super","bio","email","image","token","async","password","fetch","state","sgrud","effects","config","headers","accept","JSON","stringify","user","ok","json","next","Object","assign","undefined","authorization","UserStore_1","UserProxy","Provider","configStore","userStore","handler","race","StateHandler","timer","stateHandler","forkJoin","configState","userState","startsWith","Factor","prototype","Target","FadeProxy","Transit","document","documentElement","style","transition","subscribe","length","filter","pointerEvents","FadeQueue","element","_prev","queue","_this$element$style","opacity","delay","finalize"],"mappings":"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"}