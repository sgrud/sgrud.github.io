{"version":3,"file":"index.modern.js","sources":["../../packages/eager/src/components/home.tsx","../../packages/eager/src/components/login.tsx","../../packages/eager/src/components/register.tsx","../../packages/eager/src/components/app.tsx","../../packages/eager/src/components/footer.tsx","../../packages/eager/src/components/header.tsx"],"sourcesContent":["import { Factor } from '@sgrud/core';\nimport { Component, Route } from '@sgrud/shell';\nimport { Api, Credentials, Endpoint } from 'sgrud-realworld-core';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'home-component': HomeComponent;\n  }\n}\n\n@Route({\n  path: ''\n})\n@Component('home-component')\nexport class HomeComponent extends HTMLElement implements Component {\n\n  public styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  @Factor(() => Credentials)\n  private readonly credentials!: Credentials;\n\n  @Factor(() => Endpoint)\n  private readonly endpoint!: Endpoint;\n\n  private articles?: Api.Article[];\n\n  private from: string = 'articles';\n\n  private page: number = 0;\n\n  private pages: number = 1;\n\n  private tag?: string;\n\n  private tags?: string[];\n\n  public get template(): JSX.Element {\n    return <>\n      <div className=\"home-page\">\n        <div className=\"banner\">\n          <div className=\"container\">\n            <h1 className=\"logo-font\">conduit</h1>\n            <p>A place to share your <i>SGRUD</i> knowledge.</p>\n          </div>\n        </div>\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-9\">\n              <div className=\"feed-toggle\">\n                <ul className=\"nav nav-pills outline-active\">\n                  <li className=\"nav-item\">\n                    <a {...this.tabbing('articles/feed')}>Your Feed</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a {...this.tabbing('articles')}>Global Feed</a>\n                  </li>\n                  {this.tag && <>\n                    <li className=\"nav-item\">\n                      <a {...this.tabbing(`articles?tag=${this.tag}`)}>\n                        <i className=\"ion-pound\"></i>\n                        &nbsp;{this.tag}\n                      </a>\n                    </li>\n                  </>}\n                </ul>\n              </div>\n              {!this.articles ? <>\n                <div className=\"article-preview\">\n                  Loading articles...\n                </div>\n              </> : this.articles.length === 0 ? <>\n                <div className=\"article-preview\">\n                  No articles are here... yet.\n                </div>\n              </> : this.articles.map((article) => <>\n                <div className=\"article-preview\">\n                  <div className=\"article-meta\">\n                    <a\n                      href={`/profile/${article.author.username}`}\n                      is=\"router-link\">\n                      <img src={article.author.image}/>\n                    </a>\n                    <div className=\"info\">\n                      <a\n                        className=\"author\"\n                        href={`/profile/${article.author.username}`}\n                        is=\"router-link\">\n                        {article.author.username}\n                      </a>\n                      <span className=\"date\">\n                        {new Date(article.createdAt).toLocaleString()}\n                      </span>\n                    </div>\n                    <button\n                      className=\"btn btn-sm btn-outline-primary pull-xs-right\">\n                      <i className=\"ion-heart\"></i>\n                      &nbsp;{article.favoritesCount}\n                    </button>\n                  </div>\n                  <a\n                    className=\"preview-link\"\n                    href={`/article/${article.slug}`}\n                    is=\"router-link\">\n                    <h1>{article.title}</h1>\n                    <p>{article.description}</p>\n                    <span>Read more...</span>\n                    {article.tagList.map((tag) => <>\n                      <li className=\"tag-default tag-outline tag-pill\">\n                        {tag}\n                      </li>\n                    </>)}\n                  </a>\n                </div>\n              </>)}\n            </div>\n            <div className=\"col-md-3\">\n              <div className=\"sidebar\">\n                <p>Popular Tags</p>\n                {!this.tags ? <>\n                  <div>\n                    Loading tags...\n                  </div>\n                </> : this.tags.length === 0 ? <>\n                  <div>\n                    No tags are here... yet.\n                  </div>\n                </> : <>\n                  <div className=\"tag-list\">\n                    {this.tags.map((tag) => <>\n                      <a {...this.tagging(tag)}>\n                        {tag}\n                      </a>\n                    </>)}\n                  </div>\n                </>}\n              </div>\n            </div>\n          </div>\n          {this.pages > 1 && <>\n            <nav>\n              <ul className=\"pagination\">\n                {new Array(this.pages).fill(null).map((_, page) => <>\n                  <li className=\"active page-item\">\n                    <a {...this.paging(page)}>{page + 1}</a>\n                  </li>\n                </>)}\n              </ul>\n            </nav>\n          </>}\n        </div>\n      </div>\n    </>;\n  }\n\n  public constructor() {\n    super();\n\n    this.fetch();\n\n    this.endpoint.getTags().subscribe((next) => {\n      this.tags = next;\n      (this as Component).renderComponent?.();\n    });\n  }\n\n  private fetch(\n    page: number = this.page,\n    from: string = this.from\n  ): void {\n    const limit = 10;\n    const offset = page * limit;\n\n    this.from = from;\n    this.page = page;\n\n    if (this.articles) {\n      this.articles = undefined;\n      (this as Component).renderComponent?.();\n    }\n\n    this.endpoint.getPage(from, limit, offset).subscribe((next) => {\n      this.articles = next.articles;\n      this.pages = Math.ceil(next.articlesCount / limit);\n      (this as Component).renderComponent?.();\n    });\n  }\n\n  private paging(page: number): {\n    className: string;\n    href: string;\n    onclick: (event: Event) => void;\n  } {\n    const props = {\n      className: 'page-link',\n      href: '#',\n      onclick: (event: Event) => {\n        event.preventDefault();\n\n        if (page !== this.page) {\n          this.fetch(page);\n        }\n      }\n    };\n\n    if (page === this.page) {\n      props.className += ' active';\n    }\n\n    return props;\n  }\n\n  private tabbing(from: string): {\n    className: string;\n    href: string;\n    onclick: (event: Event) => void;\n  } {\n    const props = {\n      className: 'nav-link',\n      href: '#',\n      onclick: (event: Event) => {\n        event.preventDefault();\n\n        if (from === 'articles/feed' && !this.credentials.user) {\n          console.log('TODO', 'REDIRECT', '/login');\n        } else if (from !== this.from) {\n          this.fetch(0, from);\n        }\n      }\n    };\n\n    if (from === this.from) {\n      props.className += ' active';\n    } else if (from === 'articles/feed' && !this.credentials.user) {\n      props.className += ' disabled';\n    }\n\n    return props;\n  }\n\n  private tagging(tag: string): {\n    className: string;\n    href: string;\n    onclick: (event: Event) => void;\n  } {\n    const props = {\n      className: 'tag-pill tag-default',\n      href: '#',\n      onclick: (event: Event) => {\n        event.preventDefault();\n\n        if (tag !== this.tag) {\n          this.tag = tag;\n          this.fetch(0, `articles?tag=${this.tag}`);\n        }\n      }\n    };\n\n    if (tag === this.tag) {\n      props.className += ' active';\n    }\n\n    return props;\n  }\n\n}\n","import { Factor } from '@sgrud/core';\nimport { Component, Reference, Route, Router } from '@sgrud/shell';\nimport { from, takeWhile } from 'rxjs';\nimport { AjaxResponse as Response } from 'rxjs/ajax';\nimport { Api, Credentials, Endpoint } from 'sgrud-realworld-core';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'login-component': LoginComponent;\n  }\n}\n\n@Route({\n  path: 'login'\n})\n@Component('login-component')\nexport class LoginComponent extends HTMLElement implements Component {\n\n  public readonly styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  @Factor(() => Credentials)\n  private readonly credentials!: Credentials;\n\n  @Factor(() => Endpoint)\n  private readonly endpoint!: Endpoint;\n\n  @Factor(() => Router)\n  private readonly router!: Router;\n\n  @Reference('form', ['input'])\n  private readonly form?: HTMLFormElement;\n\n  private readonly errors: string[] = [];\n\n  public get template(): JSX.Element {\n    return <>\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-xs-12 offset-md-3\">\n              <h1 className=\"text-xs-center\">Sign in</h1>\n              <p className=\"text-xs-center\">\n                <a href=\"/register\" is=\"router-link\">Need an account?</a>\n              </p>\n              {this.errors.length > 0 && <>\n                <ul className=\"error-messages\">\n                  {this.errors.map((error) => <>\n                    <li>{error}</li>\n                  </>)}\n                </ul>\n              </>}\n              <form key=\"form\">\n                <fieldset className=\"form-group\">\n                  <input\n                    className=\"form-control form-control-lg\"\n                    name=\"email\"\n                    pattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$\"\n                    placeholder=\"Email\"\n                    required={true}\n                    type=\"email\"/>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <input\n                    className=\"form-control form-control-lg\"\n                    name=\"password\"\n                    pattern=\"^.{8,}$\"\n                    placeholder=\"Password\"\n                    required={true}\n                    type=\"password\"/>\n                </fieldset>\n                <button\n                  className=\"btn btn-lg btn-primary pull-xs-right\"\n                  disabled={!this.form?.checkValidity() || undefined}\n                  onclick={() => this.login()}\n                  type=\"button\">\n                  Sign in\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>;\n  }\n\n  public constructor() {\n    super();\n\n    from(this.credentials).pipe(\n      takeWhile(() => this.isConnected)\n    ).subscribe(({ username }) => {\n      this.router.navigate('/profile/' + username, undefined, true).subscribe();\n    });\n  }\n\n  private login(): void {\n    const formData = new FormData(this.form);\n\n    if (this.errors.length) {\n      this.errors.length = 0;\n      (this as Component).renderComponent!();\n    }\n\n    this.endpoint.login(\n      formData.get('email')!.toString(),\n      formData.get('password')!.toString()\n    ).subscribe({\n      error: ({ response }: Response<Api.Error>) => {\n        for (const key in response.errors) {\n          for (const message of response.errors[key]) {\n            this.errors.push(`${key} ${message}`);\n          }\n        }\n\n        (this as Component).renderComponent!();\n      }\n    });\n  }\n\n}\n","import { Factor } from '@sgrud/core';\nimport { Component, Reference, Route, Router } from '@sgrud/shell';\nimport { from, takeWhile } from 'rxjs';\nimport { AjaxResponse as Response } from 'rxjs/ajax';\nimport { Api, Credentials, Endpoint } from 'sgrud-realworld-core';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'register-component': RegisterComponent;\n  }\n}\n\n@Route({\n  path: 'register'\n})\n@Component('register-component')\nexport class RegisterComponent extends HTMLElement implements Component {\n\n  public readonly styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  @Factor(() => Credentials)\n  private readonly credentials!: Credentials;\n\n  @Factor(() => Endpoint)\n  private readonly endpoint!: Endpoint;\n\n  @Factor(() => Router)\n  private readonly router!: Router;\n\n  @Reference('form', ['input'])\n  private readonly form?: HTMLFormElement;\n\n  private readonly errors: string[] = [];\n\n  public get template(): JSX.Element {\n    return <>\n      <div className=\"auth-page\">\n        <div className=\"container page\">\n          <div className=\"row\">\n            <div className=\"col-md-6 col-xs-12 offset-md-3\">\n              <h1 className=\"text-xs-center\">Sign up</h1>\n              <p className=\"text-xs-center\">\n                <a href=\"/login\" is=\"router-link\">Have an account?</a>\n              </p>\n              {this.errors.length > 0 && <>\n                <ul className=\"error-messages\">\n                  {this.errors.map((error) => <>\n                    <li>{error}</li>\n                  </>)}\n                </ul>\n              </>}\n              <form key=\"form\">\n                <fieldset className=\"form-group\">\n                  <input\n                    className=\"form-control form-control-lg\"\n                    name=\"username\"\n                    placeholder=\"Your Name\"\n                    required={true}\n                    type=\"text\"/>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <input\n                    className=\"form-control form-control-lg\"\n                    name=\"email\"\n                    pattern=\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$\"\n                    placeholder=\"Email\"\n                    required={true}\n                    type=\"text\"/>\n                </fieldset>\n                <fieldset className=\"form-group\">\n                  <input\n                    className=\"form-control form-control-lg\"\n                    name=\"password\"\n                    pattern=\"^.{8,}$\"\n                    placeholder=\"Password\"\n                    required={true}\n                    type=\"password\"/>\n                </fieldset>\n                <button\n                  className=\"btn btn-lg btn-primary pull-xs-right\"\n                  disabled={!this.form?.checkValidity() || undefined}\n                  onclick={() => this.register()}\n                  type=\"button\">\n                  Sign up\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>;\n  }\n\n  public constructor() {\n    super();\n\n    from(this.credentials).pipe(\n      takeWhile(() => this.isConnected)\n    ).subscribe(({ username }) => {\n      this.router.navigate('/profile/' + username, undefined, true).subscribe();\n    });\n  }\n\n  private register(): void {\n    const formData = new FormData(this.form);\n\n    if (this.errors.length) {\n      this.errors.length = 0;\n      (this as Component).renderComponent!();\n    }\n\n    this.endpoint.register(\n      formData.get('email')!.toString(),\n      formData.get('username')!.toString(),\n      formData.get('password')!.toString()\n    ).subscribe({\n      error: ({ response }: Response<Api.Error>) => {\n        for (const key in response.errors) {\n          for (const message of response.errors[key]) {\n            this.errors.push(`${key} ${message}`);\n          }\n        }\n\n        (this as Component).renderComponent!();\n      }\n    });\n  }\n\n}\n","import { Factor } from '@sgrud/core';\nimport { Component, Reference, Route } from '@sgrud/shell';\nimport { FadeTask } from 'sgrud-realworld-core';\nimport { HomeComponent } from './home';\nimport { LoginComponent } from './login';\nimport { RegisterComponent } from './register';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'app-component': AppComponent;\n  }\n}\n\n@Route({\n  path: '',\n  children: [\n    HomeComponent,\n    LoginComponent,\n    RegisterComponent\n  ],\n  slots: {\n    header: 'header-component',\n    footer: 'footer-component'\n  }\n})\n@Component('app-component')\nexport class AppComponent extends HTMLElement implements Component {\n\n  public readonly styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  @Factor(() => FadeTask)\n  private fadeTask!: FadeTask;\n\n  @Reference('main')\n  private main?: HTMLElement;\n\n  public get template(): JSX.Element {\n    return <>\n      <slot\n        name=\"header\">\n      </slot>\n      <main key=\"main\">\n        <slot>\n          Loading route...\n        </slot>\n      </main>\n      <slot\n        name=\"footer\">\n      </slot>\n    </>;\n  }\n\n  public connectedCallback(): void {\n    (this as Component).renderComponent!();\n    this.fadeTask.element = this.main;\n  }\n\n}\n","import { Component } from '@sgrud/shell';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'footer-component': FooterComponent;\n  }\n}\n\n@Component('footer-component')\nexport class FooterComponent extends HTMLElement implements Component {\n\n  public styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  public get template(): JSX.Element {\n    return <>\n      <footer>\n        <div className=\"container\">\n          <a className=\"logo-font\" href=\"/\" is=\"router-link\">conduit</a>\n          <span className=\"attribution\">\n            An interactive learning project from\n            <a href=\"https://thinkster.io\">Thinkster</a>.\n            Code &amp; design licensed under MIT.\n          </span>\n        </div>\n      </footer>\n    </>;\n  }\n\n}\n","import { Factor } from '@sgrud/core';\nimport { Component, Router } from '@sgrud/shell';\nimport { from, merge } from 'rxjs';\nimport { Credentials } from 'sgrud-realworld-core';\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'header-component': HeaderComponent;\n  }\n}\n\n@Component('header-component')\nexport class HeaderComponent extends HTMLElement implements Component {\n\n  public styles: string[] = [\n    '@import url(\"//demo.productionready.io/main.css\");'\n  ];\n\n  @Factor(() => Credentials)\n  private credentials!: Credentials;\n\n  @Factor(() => Router)\n  private router!: Router;\n\n  public get template(): JSX.Element {\n    return <>\n      <nav className=\"navbar navbar-light\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/\" is=\"router-link\">conduit</a>\n          <ul className=\"nav navbar-nav pull-xs-right\">\n            <li className=\"nav-item\">\n              <a is=\"router-link\"\n                {...this.navLink()}>\n                Home\n              </a>\n            </li>\n            {this.credentials.user?.token ? <>\n              <li className=\"nav-item\">\n                <a is=\"router-link\"\n                  {...this.navLink('editor')}>\n                  <i className=\"ion-compose\"></i>\n                  &nbsp;New Article\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a is=\"router-link\"\n                  {...this.navLink('settings')}>\n                  <i className=\"ion-gear-a\"></i>\n                  &nbsp;Settings\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a is=\"router-link\"\n                  {...this.navLink('profile', this.credentials.user.username)}>\n                  <img\n                    alt=\"user image\"\n                    className=\"user-pic\"\n                    src={this.credentials.user.image}/>\n                  {this.credentials.user.username}\n                </a>\n              </li>\n            </> : <>\n              <li className=\"nav-item\">\n                <a is=\"router-link\"\n                  {...this.navLink('login')}>\n                  Sign in\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a is=\"router-link\"\n                  {...this.navLink('register')}>\n                  Sign up\n                </a>\n              </li>\n            </>}\n          </ul>\n        </div>\n      </nav>\n    </>;\n  }\n\n  public connectedCallback(): void {\n    merge(\n      from(this.credentials),\n      from(this.router)\n    ).subscribe(() => {\n      (this as Component).renderComponent!();\n    });\n  }\n\n  private navLink(...parts: string[]): { className: string; href: string } {\n    const href = '/' + parts.join('/');\n    const props = { className: 'nav-link', href };\n\n    if (this.router.rebase(href, false) === this.router.state.path) {\n      props.className += ' active';\n    }\n\n    return props;\n  }\n\n}\n"],"names":["HomeComponent","HTMLElement","_jsx","_Fragment","children","_jsxs","className","this","tabbing","_extends","tag","articles","length","map","article","href","author","username","is","src","image","createdAt","toLocaleString","favoritesCount","slug","title","description","tagList","tags","tagging","pages","Array","fill","_","page","paging","constructor","super","styles","credentials","endpoint","from","fetch","getTags","subscribe","next","_this$renderComponent","renderComponent","offset","undefined","_this$renderComponent2","call","getPage","_this$renderComponent3","Math","ceil","articlesCount","props","onclick","event","preventDefault","user","console","log","__decorate","Factor","Credentials","prototype","Endpoint","Route","path","Component","LoginComponent","template","errors","error","name","pattern","placeholder","required","type","disabled","form","_this$form","checkValidity","login","router","pipe","takeWhile","isConnected","navigate","formData","FormData","get","toString","response","key","push","message","Router","Reference","RegisterComponent","register","AppComponent","fadeTask","main","connectedCallback","element","FadeTask","slots","header","footer","FooterComponent","HeaderComponent","args","_this$credentials$use","navLink","token","alt","merge","parts","join","rebase","state"],"mappings":"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"}